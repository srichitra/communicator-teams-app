import { Activity, ChannelAccount } from '@microsoft/agents-activity';
import { ConnectorClient, AuthConfiguration, AuthProvider } from '@microsoft/agents-hosting';
import { TeamsChannelAccount } from './teamsChannelAccount';
import { TeamsPagedMembersResult } from './teamsPagedMembersResult';
import { TeamDetails } from './teamDetails';
import { TeamsMember } from './teamsMember';
import { MeetingInfo } from './meetingInfo';
import { MeetingNotification } from './meetingNotification';
import { MeetingNotificationResponse } from './meetingNotificationResponse';
import { TeamsBatchOperationResponse } from './teamsBatchOperationResponse';
import { BatchOperationStateResponse } from './batchOperationStateResponse';
import { BatchFailedEntriesResponse } from './batchFailedEntriesResponse';
import { CancelOperationResponse } from './cancelOperationResponse';
import { ChannelInfo } from '../channel-data';
export declare class TeamsConnectorClient extends ConnectorClient {
    /**
     * Creates a new instance of ConnectorClient with authentication.
     * @param baseURL - The base URL for the API.
     * @param authConfig - The authentication configuration.
     * @param authProvider - The authentication provider.
     * @param scope - The scope for the authentication token.
     * @returns A new instance of ConnectorClient.
     */
    static createClientWithAuthAsync(baseURL: string, authConfig: AuthConfiguration, authProvider: AuthProvider, scope: string): Promise<TeamsConnectorClient>;
    static getMember(activity: Activity, userId: string): Promise<TeamsChannelAccount>;
    private static getTeamId;
    static getTeamMember(activity: any, teamId?: string, userId?: string): Promise<ChannelAccount>;
    getConversationMember(conversationId: string, userId: string): Promise<ChannelAccount>;
    static getMemberInternal(activity: any, conversationId: string | undefined, userId: string): Promise<ChannelAccount>;
    getConversationPagedMember(conversationId: string, pageSize: number, continuationToken: string): Promise<TeamsPagedMembersResult>;
    fetchChannelList(teamId: string): Promise<ChannelInfo[]>;
    fetchTeamDetails(teamId: string): Promise<TeamDetails>;
    fetchMeetingParticipant(meetingId: string, participantId: string, tenantId: string): Promise<string>;
    fetchMeetingInfo(meetingId: string): Promise<MeetingInfo>;
    sendMeetingNotification(meetingId: string, notification: MeetingNotification): Promise<MeetingNotificationResponse>;
    sendMessageToListOfUsers(activity: Activity, tenantId: string, members: TeamsMember[]): Promise<TeamsBatchOperationResponse>;
    sendMessageToAllUsersInTenant(activity: Activity, tenandId: string): Promise<TeamsBatchOperationResponse>;
    sendMessageToAllUsersInTeam(activity: Activity, tenantId: string, teamId: string): Promise<TeamsBatchOperationResponse>;
    sendMessageToListOfChannels(activity: Activity, tenantId: string, members: TeamsMember[]): Promise<TeamsBatchOperationResponse>;
    getOperationState(operationId: string): Promise<BatchOperationStateResponse>;
    getFailedEntries(operationId: string): Promise<BatchFailedEntriesResponse>;
    cancelOperation(operationId: string): Promise<CancelOperationResponse>;
}
