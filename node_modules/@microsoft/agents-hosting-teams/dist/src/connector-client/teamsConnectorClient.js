"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeamsConnectorClient = void 0;
/** * Copyright (c) Microsoft Corporation. All rights reserved. * Licensed under the MIT License. */
const axios_1 = __importDefault(require("axios"));
const agents_hosting_1 = require("@microsoft/agents-hosting");
class TeamsConnectorClient extends agents_hosting_1.ConnectorClient {
    /**
     * Creates a new instance of ConnectorClient with authentication.
     * @param baseURL - The base URL for the API.
     * @param authConfig - The authentication configuration.
     * @param authProvider - The authentication provider.
     * @param scope - The scope for the authentication token.
     * @returns A new instance of ConnectorClient.
     */
    static async createClientWithAuthAsync(baseURL, authConfig, authProvider, scope) {
        const axiosInstance = axios_1.default.create({
            baseURL,
            headers: {
                Accept: 'application/json',
                'User-Agent': (0, agents_hosting_1.getProductInfo)(),
            }
        });
        const token = await authProvider.getAccessToken(authConfig, scope);
        if (token.length > 1) {
            axiosInstance.defaults.headers.common.Authorization = `Bearer ${token}`;
        }
        return new TeamsConnectorClient(axiosInstance);
    }
    static async getMember(activity, userId) {
        var _a;
        const teamsChannelData = activity.channelData;
        const teamId = (_a = teamsChannelData.team) === null || _a === void 0 ? void 0 : _a.id;
        if (teamId) {
            return await this.getTeamMember(activity, teamId, userId);
        }
        else {
            const conversationId = (activity.conversation != null) && activity.conversation.id ? activity.conversation.id : undefined;
            return await this.getMemberInternal(activity, conversationId, userId);
        }
    }
    static getTeamId(activity) {
        if (!activity) {
            throw new Error('Missing activity parameter');
        }
        const channelData = activity.channelData;
        const team = channelData && (channelData.team != null) ? channelData.team : undefined;
        const teamId = (team != null) && typeof team.id === 'string' ? team.id : undefined;
        return teamId;
    }
    static async getTeamMember(activity, teamId, userId) {
        const t = teamId || this.getTeamId(activity);
        if (!t) {
            throw new Error('This method is only valid within the scope of a MS Teams Team.');
        }
        if (!userId) {
            throw new Error('userId is required');
        }
        return await this.getMemberInternal(activity, t, userId);
    }
    async getConversationMember(conversationId, userId) {
        const config = {
            method: 'get',
            url: `/v3/conversations/${conversationId}/members/${userId}`,
            headers: {
                'Content-Type': 'application/json'
            }
        };
        const response = await this.client(config);
        return response.data;
    }
    static async getMemberInternal(activity, conversationId, userId) {
        var _a;
        if (!conversationId) {
            throw new Error('conversationId is required');
        }
        const client = (_a = activity.turnState) === null || _a === void 0 ? void 0 : _a.get(activity.adapter.ConnectorClientKey);
        if (!client) {
            throw new Error('Client is not available in the context.');
        }
        const teamMember = await client.getConversationMember(conversationId, userId);
        return teamMember;
    }
    async getConversationPagedMember(conversationId, pageSize, continuationToken) {
        const config = {
            method: 'get',
            url: `v3/conversations/${conversationId}/pagedMembers`,
            params: {
                pageSize,
                continuationToken
            }
        };
        const response = await this.client(config);
        return response.data;
    }
    async fetchChannelList(teamId) {
        const config = {
            method: 'get',
            url: `v3/teams/${teamId}/conversations`
        };
        const response = await this.client(config);
        return response.data;
    }
    async fetchTeamDetails(teamId) {
        const config = {
            method: 'get',
            url: `v3/teams/${teamId}`
        };
        const response = await this.client(config);
        return response.data;
    }
    async fetchMeetingParticipant(meetingId, participantId, tenantId) {
        const config = {
            method: 'get',
            url: `v1/meetings/${meetingId}/participants/${participantId}`,
            params: { tenantId }
        };
        const response = await this.client(config);
        return response.data;
    }
    async fetchMeetingInfo(meetingId) {
        const config = {
            method: 'get',
            url: `v1/meetings/${meetingId}`
        };
        const response = await this.client(config);
        return response.data;
    }
    async sendMeetingNotification(meetingId, notification) {
        const config = {
            method: 'post',
            url: `v1/meetings/${meetingId}/notification`,
            data: notification
        };
        const response = await this.client(config);
        return response.data;
    }
    async sendMessageToListOfUsers(activity, tenantId, members) {
        const content = {
            activity,
            members,
            tenantId
        };
        const config = {
            method: 'post',
            url: 'v3/batch/conversation/users',
            data: content
        };
        const response = await this.client(config);
        return response.data;
    }
    async sendMessageToAllUsersInTenant(activity, tenandId) {
        const content = {
            activity,
            tenandId
        };
        const config = {
            method: 'post',
            url: 'v3/batch/conversation/tenant',
            data: content
        };
        const response = await this.client(config);
        return response.data;
    }
    async sendMessageToAllUsersInTeam(activity, tenantId, teamId) {
        const content = {
            activity,
            tenantId,
            teamId
        };
        const config = {
            method: 'post',
            url: 'v3/batch/conversation/team',
            data: content
        };
        const response = await this.client(config);
        return response.data;
    }
    async sendMessageToListOfChannels(activity, tenantId, members) {
        const content = {
            activity,
            tenantId,
            members
        };
        const config = {
            method: 'post',
            url: 'v3/batch/conversation/channels',
            data: content
        };
        const response = await this.client(config);
        return response.data;
    }
    async getOperationState(operationId) {
        const config = {
            method: 'get',
            url: `v3/batch/conversation/${operationId}`
        };
        const response = await this.client(config);
        return response.data;
    }
    async getFailedEntries(operationId) {
        const config = {
            method: 'get',
            url: `v3/batch/conversation/failedentries/${operationId}`
        };
        const response = await this.client(config);
        return response.data;
    }
    async cancelOperation(operationId) {
        const config = {
            method: 'delete',
            url: `v3/batch/conversation/${operationId}`
        };
        const response = await this.client(config);
        return response.data;
    }
}
exports.TeamsConnectorClient = TeamsConnectorClient;
//# sourceMappingURL=teamsConnectorClient.js.map