/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { RouteSelector, TurnContext, TurnState } from '@microsoft/agents-hosting';
import { AdaptiveCard } from './adaptiveCard';
import { TeamsApplication } from '../teamsApplication';
import { AdaptiveCardSearchResult } from './adaptiveCardSearchResult';
import { Query } from '../query';
import { AdaptiveCardsSearchParams } from '../../adaptive-cards';
export declare const ACTION_INVOKE_NAME = "adaptiveCard/action";
export declare class AdaptiveCardsActions<TState extends TurnState> {
    private readonly _app;
    constructor(app: TeamsApplication<TState>);
    actionExecute<TData = Record<string, any>>(verb: string | RegExp | RouteSelector | (string | RegExp | RouteSelector)[], handler: (context: TurnContext, state: TState, data: TData) => Promise<AdaptiveCard | string>): TeamsApplication<TState>;
    actionSubmit<TData = Record<string, any>>(verb: string | RegExp | RouteSelector | (string | RegExp | RouteSelector)[], handler: (context: TurnContext, state: TState, data: TData) => Promise<void>): TeamsApplication<TState>;
    search(dataset: string | RegExp | RouteSelector | (string | RegExp | RouteSelector)[], handler: (context: TurnContext, state: TState, query: Query<AdaptiveCardsSearchParams>) => Promise<AdaptiveCardSearchResult[]>): TeamsApplication<TState>;
}
