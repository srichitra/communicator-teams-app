/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Activity } from '@microsoft/agents-activity';
import { RouteSelector, TurnContext, TurnState } from '@microsoft/agents-hosting';
import { TeamsApplication } from '../teamsApplication';
import { TaskModuleTaskInfo } from '../../task/taskModuleTaskInfo';
import { MessagingExtensionResult } from '../../messaging-extension/messagingExtensionResult';
import { Query } from '../query';
export declare class MessageExtensions<TState extends TurnState> {
    private readonly _app;
    constructor(app: TeamsApplication<TState>);
    anonymousQueryLink(handler: (context: TurnContext, state: TState, url: string) => Promise<MessagingExtensionResult>): TeamsApplication<TState>;
    messagePreviewEdit(commandId: string | RegExp | RouteSelector | (string | RegExp | RouteSelector)[], handler: (context: TurnContext, state: TState, previewActivity: Partial<Activity>) => Promise<MessagingExtensionResult | TaskModuleTaskInfo | string | null | undefined>): TeamsApplication<TState>;
    messagePreviewSend(commandId: string | RegExp | RouteSelector | (string | RegExp | RouteSelector)[], handler: (context: TurnContext, state: TState, previewActivity: Partial<Activity>) => Promise<void>): TeamsApplication<TState>;
    fetchTask(commandId: string | RegExp | RouteSelector | (string | RegExp | RouteSelector)[], handler: (context: TurnContext, state: TState) => Promise<TaskModuleTaskInfo | string>): TeamsApplication<TState>;
    query<TParams extends Record<string, any> = Record<string, any>>(commandId: string | RegExp | RouteSelector | (string | RegExp | RouteSelector)[], handler: (context: TurnContext, state: TState, query: Query<TParams>) => Promise<MessagingExtensionResult>): TeamsApplication<TState>;
    queryLink(handler: (context: TurnContext, state: TState, url: string) => Promise<MessagingExtensionResult>): TeamsApplication<TState>;
    selectItem<TItem extends Record<string, any> = Record<string, any>>(handler: (context: TurnContext, state: TState, item: TItem) => Promise<MessagingExtensionResult>): TeamsApplication<TState>;
    submitAction<TData extends Record<string, any>>(commandId: string | RegExp | RouteSelector | (string | RegExp | RouteSelector)[], handler: (context: TurnContext, state: TState, data: TData) => Promise<MessagingExtensionResult | TaskModuleTaskInfo | string | null | undefined>): TeamsApplication<TState>;
    private returnSubmitActionResponse;
    queryUrlSetting(handler: (context: TurnContext, state: TState) => Promise<MessagingExtensionResult>): TeamsApplication<TState>;
    configureSettings<TData extends Record<string, any>>(handler: (context: TurnContext, state: TState, settings: TData) => Promise<void>): TeamsApplication<TState>;
    handleOnButtonClicked<TData extends Record<string, any>>(handler: (context: TurnContext, state: TState, data: TData) => Promise<void>): TeamsApplication<TState>;
}
