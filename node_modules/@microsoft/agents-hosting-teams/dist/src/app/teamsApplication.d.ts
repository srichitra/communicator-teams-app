/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Activity, ConversationReference } from '@microsoft/agents-activity';
import { AgentApplication, RouteHandler, RouteSelector, TurnContext, TurnState } from '@microsoft/agents-hosting';
import { TeamsApplicationOptions } from './teamsApplicationOptions';
import { FileConsentCardResponse } from '../file/fileConsentCardResponse';
import { ChannelInfo } from '../channel-data/channelInfo';
import { TeamDetails } from '../connector-client/teamDetails';
import { TeamsPagedMembersResult } from '../connector-client/teamsPagedMembersResult';
import { ReadReceiptInfo } from '../message-read-info/readReceipInfo';
import { AdaptiveCardsActions } from './adaptive-cards-actions';
import { MessageReactionEvents, Messages, TeamsMessageEvents } from './messages';
import { MessageExtensions } from './messaging-extension';
import { Meetings } from './meeting';
import { TaskModules } from './task';
import { TeamsConversationUpdateEvents } from './conversation-events';
import { TeamsOAuthFlowAppStyle } from './oauth/teamsOAuthFlowAppStyle';
export declare class TeamsApplication<TState extends TurnState> extends AgentApplication<TState> {
    private readonly _teamsOptions;
    private readonly _invokeRoutes;
    private readonly _adaptiveCards;
    private readonly _messages;
    private readonly _messageExtensions;
    private readonly _meetings;
    private readonly _taskModules;
    private readonly _teamsAuthManager?;
    constructor(options?: Partial<TeamsApplicationOptions<TState>>);
    get teamsOptions(): TeamsApplicationOptions<TState>;
    get taskModules(): TaskModules<TState>;
    get adaptiveCards(): AdaptiveCardsActions<TState>;
    get messages(): Messages<TState>;
    get messageExtensions(): MessageExtensions<TState>;
    get meetings(): Meetings<TState>;
    get teamsAuthManager(): TeamsOAuthFlowAppStyle;
    addRoute(selector: RouteSelector, handler: RouteHandler<TState>, isInvokeRoute?: boolean): this;
    run(turnContext: TurnContext): Promise<void>;
    private runInternalTeams;
    conversationUpdate(event: TeamsConversationUpdateEvents, handler: (context: TurnContext, state: TState) => Promise<void>): this;
    messageEventUpdate(event: TeamsMessageEvents, handler: (context: TurnContext, state: TState) => Promise<void>): this;
    messageReactions(event: MessageReactionEvents, handler: (context: TurnContext, state: TState) => Promise<void>): this;
    fileConsentAccept(handler: (context: TurnContext, state: TState, fileConsentResponse: FileConsentCardResponse) => Promise<void>): this;
    fileConsentDecline(handler: (context: TurnContext, state: TState, fileConsentResponse: FileConsentCardResponse) => Promise<void>): this;
    handoff(handler: (context: TurnContext, state: TState, continuation: string) => Promise<void>): this;
    getTeamChannels(context: TurnContext | ConversationReference | Activity): Promise<ChannelInfo[]>;
    getTeamDetails(context: TurnContext | ConversationReference | Activity): Promise<TeamDetails | undefined>;
    getPagedMembers(context: TurnContext | ConversationReference, pageSize?: number, continuationToken?: string): Promise<TeamsPagedMembersResult>;
    teamsReadReceipt(handler: (context: TurnContext, state: TState, readReceiptInfo: ReadReceiptInfo) => Promise<void>): this;
    private createMessageEventUpdateSelector;
    private createMessageReactionSelector;
    private getConversationReference;
    private createTeamsConversationUpdateSelector;
}
