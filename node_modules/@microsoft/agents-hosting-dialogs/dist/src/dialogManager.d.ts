/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { TurnContext, AgentState, ConversationState, UserState, TurnContextStateCollection } from '@microsoft/agents-hosting';
import { Configurable } from './configurable';
import { DialogSet } from './dialogSet';
import { Dialog } from './dialog';
import { DialogStateManagerConfiguration } from './memory';
import { DialogTurnResult } from './dialogTurnResult';
export interface DialogManagerResult {
    turnResult: DialogTurnResult;
}
export interface DialogManagerConfiguration {
    conversationState: AgentState;
    rootDialog: Dialog;
    userState?: UserState;
    expireAfter?: number;
    stateConfiguration?: DialogStateManagerConfiguration;
}
/**
 * Class which runs the dialog system.
 *
 * @deprecated This class will be deprecated.
 */
export declare class DialogManager extends Configurable {
    private _rootDialogId;
    private readonly _dialogStateProperty;
    private readonly _initialTurnState;
    /**
       * Creates an instance of the DialogManager class.
       *
       * @param rootDialog Optional, root Dialog to use.
       * @param dialogStateProperty Optional, alternate name for the dialogState property. (Default is "DialogStateProperty")
       */
    constructor(rootDialog?: Dialog, dialogStateProperty?: string);
    conversationState: ConversationState;
    userState?: UserState;
    /**
       * Values that will be copied to the `TurnContext.turnState` at the beginning of each turn.
       *
       * @returns The turn state collection.
       */
    get initialTurnState(): TurnContextStateCollection;
    /**
       * Root dialog to start from [onTurn()](#onturn) method.
       */
    set rootDialog(value: Dialog);
    /**
       * Gets the root Dialog ID.
       *
       * @returns The root Dialog ID.
       */
    get rootDialog(): Dialog;
    dialogs: DialogSet;
    stateConfiguration?: DialogStateManagerConfiguration;
    expireAfter?: number;
    /**
       * Set configuration settings.
       *
       * @param config Configuration settings to apply.
       * @returns The cofigured DialogManager context.
       */
    configure(config: Partial<DialogManagerConfiguration>): this;
    /**
       * Runs dialog system in the context of a TurnContext.
       *
       * @param context TurnContext for the current turn of conversation with the user.
       * @returns Result of running the logic against the activity.
       */
    onTurn(context: TurnContext): Promise<DialogManagerResult>;
    private registerContainerDialogs;
}
