/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { ModelResult } from './modelResult';
import { TokenizerFunction } from './tokenizer';
/**
 * Basic search options used to control how choices are recognized in a users utterance.
 */
export interface FindValuesOptions {
    allowPartialMatches?: boolean;
    locale?: string;
    maxTokenDistance?: number;
    tokenizer?: TokenizerFunction;
}
export interface FoundValue {
    value: string;
    index: number;
    score: number;
}
export interface SortedValue {
    value: string;
    index: number;
}
/**
 * INTERNAL: Low-level function that searches for a set of values within an utterance. Higher level
 * functions like `findChoices()` and `recognizeChoices()` are layered above this function.  In most
 * cases its easier to just call one of the higher level functions instead but this function contains
 * the fuzzy search algorithm that drives choice recognition.
 *
 * @param utterance The text or user utterance to search over.
 * @param values List of values to search over.
 * @param options (Optional) options used to tweak the search that's performed.
 * @returns A list of found values.
 */
export declare function findValues(utterance: string, values: SortedValue[], options?: FindValuesOptions): ModelResult<FoundValue>[];
