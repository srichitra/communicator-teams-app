"use strict";
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.findChoices = findChoices;
const findValues_1 = require("./findValues");
/**
 * Mid-level search function for recognizing a choice in an utterance.
 *
 * @param utterance The text or user utterance to search over. For an incoming 'message' activity you can simply use `context.activity.text`.
 * @param choices List of choices to search over.
 * @param options (Optional) options used to tweak the search that's performed.
 * @returns A list of found choices, sorted by most relevant first.
 */
function findChoices(utterance, choices, options) {
    const opt = options || {};
    const list = (choices || []).map((choice) => typeof choice === 'string' ? { value: choice } : choice);
    const synonyms = [];
    list.forEach((choice, index) => {
        if (!opt.noValue) {
            synonyms.push({ value: choice.value, index });
        }
        if (choice.action && choice.action.title && !opt.noAction) {
            synonyms.push({ value: choice.action.title, index });
        }
        (choice.synonyms || []).forEach((synonym) => synonyms.push({ value: synonym, index }));
    });
    return (0, findValues_1.findValues)(utterance, synonyms, options).map((v) => {
        const choice = list[v.resolution.index];
        return {
            start: v.start,
            end: v.end,
            typeName: 'choice',
            text: v.text,
            resolution: {
                value: choice.value,
                index: v.resolution.index,
                score: v.resolution.score,
                synonym: v.resolution.value,
            },
        };
    });
}
//# sourceMappingURL=findChoices.js.map