"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentStateSet = void 0;
/**
 * A collection of `AgentState` plugins that should be loaded or saved in parallel as a single unit.
 * See `AutoSaveStateMiddleware` for an implementation of this class.
 */
class AgentStateSet {
    /**
       * Creates a new AgentStateSet instance.
       *
       * @param agentStates One or more AgentState plugins to register.
       */
    constructor(...agentStates) {
        /**
           * Array of the sets `AgentState` plugins.
           */
        this.agentStates = [];
        AgentStateSet.prototype.add.apply(this, agentStates);
    }
    /**
       * Registers one or more `AgentState` plugins with the set.
       *
       * @param agentStates One or more AgentState plugins to register.
       * @returns The updated AgentStateSet.
       */
    add(...agentStates) {
        agentStates.forEach((agentstate) => {
            if (typeof agentstate.load === 'function' && typeof agentstate.saveChanges === 'function') {
                this.agentStates.push(agentstate);
            }
            else {
                throw new Error("AgentStateSet: a object was added that isn't an instance of AgentStateSet.");
            }
        });
        return this;
    }
    /**
       * Calls `AgentState.load()` on all of the AgentState plugins in the set.
       *
       * @remarks
       * This will trigger all of the plugins to read in their state in parallel.
       *
       * @param context Context for current turn of conversation with the user.
       * @param force (Optional) If `true` the cache will be bypassed and the state will always be read in directly from storage. Defaults to `false`.
       */
    async loadAll(context, force = false) {
        const promises = this.agentStates.map((agentstate) => agentstate.load(context, force));
        await Promise.all(promises);
    }
    /**
       * Calls `AgentState.saveChanges()` on all of the AgentState plugins in the set.
       *
       * @remarks
       * This will trigger all of the plugins to write out their state in parallel.
       *
       * @param context Context for current turn of conversation with the user.
       * @param force (Optional) if `true` the state will always be written out regardless of its change state. Defaults to `false`.
       */
    async saveAllChanges(context, force = false) {
        const promises = this.agentStates.map((agentstate) => agentstate.saveChanges(context, force));
        await Promise.all(promises);
    }
}
exports.AgentStateSet = AgentStateSet;
//# sourceMappingURL=agentStateSet.js.map