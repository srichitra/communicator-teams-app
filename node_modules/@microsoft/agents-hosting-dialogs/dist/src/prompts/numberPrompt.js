"use strict";
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumberPrompt = void 0;
const globalize_1 = __importDefault(require("globalize"));
const recognizers_text_number_1 = require("@microsoft/recognizers-text-number");
const locales = __importStar(require("../i18n"));
const prompt_1 = require("./prompt");
const agents_activity_1 = require("@microsoft/agents-activity");
// Load all registered locales into Globalize library
Object.values(locales).forEach((locale) => globalize_1.default.load(locale));
/**
 * Prompts a user to enter a number.
 *
 * @remarks
 * By default the prompt will return to the calling dialog a `number` representing the users input.
 */
class NumberPrompt extends prompt_1.Prompt {
    /**
       * Creates a new NumberPrompt instance.
       *
       * @param dialogId Unique ID of the dialog within its parent `DialogSet` or `ComponentDialog`.
       * @param validator (Optional) validator that will be called each time the user responds to the prompt.
       * @param defaultLocale (Optional) locale to use if `TurnContext.activity.locale` is not specified. Defaults to a value of `en-us`.
       */
    constructor(dialogId, validator, defaultLocale) {
        super(dialogId, validator);
        this.defaultLocale = defaultLocale;
    }
    /**
       * Prompts the user for input.
       *
       * @param context [TurnContext] context for the current
       * turn of conversation with the user.
       * @param state Contains state for the current instance of the prompt on the dialog stack.
       * @param options A [PromptOptions] object constructed
       * from the options initially provided in the call to Prompt.
       * @param isRetry `true` if this is the first time this prompt dialog instance
       * on the stack is prompting the user for input; otherwise, false.
       * @returns A `Promise` representing the asynchronous operation.
       */
    async onPrompt(context, state, options, isRetry) {
        if (isRetry && options.retryPrompt) {
            await context.sendActivity(options.retryPrompt, undefined, agents_activity_1.InputHints.ExpectingInput);
        }
        else if (options.prompt) {
            await context.sendActivity(options.prompt, undefined, agents_activity_1.InputHints.ExpectingInput);
        }
    }
    /**
       * Attempts to recognize the user's input.
       *
       * @param context [TurnContext], context for the current
       * turn of conversation with the user.
       * @param _state Contains state for the current instance of the prompt on the dialog stack.
       * @param _options A [PromptOptions] object constructed
       * from the options initially provided in the call to Prompt.
       * @returns A `Promise` representing the asynchronous operation.
       */
    async onRecognize(context, _state, _options) {
        const result = { succeeded: false };
        const activity = context.activity;
        const utterance = activity.text;
        if (!utterance) {
            return result;
        }
        const defaultLocale = this.defaultLocale || 'en-us';
        const locale = activity.locale || defaultLocale;
        const [{ resolution = null } = {}] = (0, recognizers_text_number_1.recognizeNumber)(utterance, locale) || [];
        if (resolution) {
            result.succeeded = true;
            // Note: if we encounter an exception loading a globalize number parser, fall back to the
            // parser for the default locale
            const parser = (0, globalize_1.default)(this.getCultureFormattedForGlobalize(locale));
            let numberParser;
            try {
                numberParser = parser.numberParser();
            }
            catch {
                numberParser = (0, globalize_1.default)(this.getCultureFormattedForGlobalize(defaultLocale)).numberParser();
            }
            result.value = numberParser(resolution.value);
        }
        return result;
    }
    /**
       * @private
       * The portions of the Globalize parsing library we use only need the first letters for internationalization culture
       */
    getCultureFormattedForGlobalize(culture) {
        return culture.slice(0, 2).toLowerCase();
    }
}
exports.NumberPrompt = NumberPrompt;
//# sourceMappingURL=numberPrompt.js.map