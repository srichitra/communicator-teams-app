"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttachmentPrompt = void 0;
const prompt_1 = require("./prompt");
const agents_activity_1 = require("@microsoft/agents-activity");
/**
 * Prompts a user to upload attachments like images.
 *
 * @remarks
 * By default the prompt will return to the calling dialog an `Attachment[]`.
 */
class AttachmentPrompt extends prompt_1.Prompt {
    // eslint-disable-next-line @typescript-eslint/no-useless-constructor
    constructor(dialogId, validator) {
        super(dialogId, validator);
    }
    /**
       * Prompts the user for input.
       *
       * @param context Context for the current turn of conversation with the user.
       * @param state Contains state for the current instance of the prompt on the dialog stack.
       * @param options A prompt options object constructed from the options initially provided
       * in the call to Prompt.
       * @param isRetry `true` if this is the first time this prompt dialog instance
       * on the stack is prompting the user for input; otherwise, false.
       * @returns A Promise representing the asynchronous operation.
       */
    async onPrompt(context, state, options, isRetry) {
        if (isRetry && options.retryPrompt) {
            await context.sendActivity(options.retryPrompt, undefined, agents_activity_1.InputHints.ExpectingInput);
        }
        else if (options.prompt) {
            await context.sendActivity(options.prompt, undefined, agents_activity_1.InputHints.ExpectingInput);
        }
    }
    /**
       * Attempts to recognize the user's input.
       *
       * @param context Context for the current turn of conversation with the user.
       * @param _state Contains state for the current instance of the prompt on the dialog stack.
       * @param _options A prompt options object constructed from the options initially provided
       * in the call to Prompt.
       * @returns A Promise representing the asynchronous operation.
       */
    async onRecognize(context, _state, _options) {
        const value = context.activity.attachments;
        return Array.isArray(value) && value.length > 0 ? { succeeded: true, value } : { succeeded: false };
    }
}
exports.AttachmentPrompt = AttachmentPrompt;
//# sourceMappingURL=attachmentPrompt.js.map