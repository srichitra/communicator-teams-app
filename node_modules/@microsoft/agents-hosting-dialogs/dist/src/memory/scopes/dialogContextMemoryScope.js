"use strict";
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DialogContextMemoryScope = void 0;
const memoryScope_1 = require("./memoryScope");
const scopePath_1 = require("../scopePath");
class DialogContextMemoryScope extends memoryScope_1.MemoryScope {
    /**
       * Initializes a new instance of the `DialogContextMemoryScope` class.
       */
    constructor() {
        super(scopePath_1.ScopePath.dialogContext, false);
    }
    /**
       * Gets the backing memory for this scope.
       *
       * @param dialogContext The `DialogContext` object for this turn.
       * @returns Memory for the scope.
       */
    getMemory(dialogContext) {
        const stack = [];
        let currentDialogContext = dialogContext;
        // go to leaf node
        while (currentDialogContext.child) {
            currentDialogContext = currentDialogContext.child;
        }
        while (currentDialogContext) {
            for (let i = currentDialogContext.stack.length - 1; i >= 0; i--) {
                const item = currentDialogContext.stack[i];
                // filter out ActionScope items because they are internal bookkeeping.
                if (!item.id.startsWith('ActionScope[')) {
                    stack.push(item.id);
                }
            }
            currentDialogContext = currentDialogContext.parent;
        }
        return {
            stack,
            activeDialog: dialogContext.activeDialog && dialogContext.activeDialog.id,
            parent: dialogContext.parent && dialogContext.parent.activeDialog && dialogContext.parent.activeDialog.id,
        };
    }
}
exports.DialogContextMemoryScope = DialogContextMemoryScope;
//# sourceMappingURL=dialogContextMemoryScope.js.map