"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClassMemoryScope = void 0;
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const memoryScope_1 = require("./memoryScope");
const scopePath_1 = require("../scopePath");
class ClassMemoryScope extends memoryScope_1.MemoryScope {
    /**
       * Initializes a new instance of the ClassMemoryScope class.
       *
       * @param name Name of the scope class.
       */
    constructor(name = scopePath_1.ScopePath.class) {
        super(name, false);
    }
    /**
       * Gets the backing memory for this scope.
       *
       * @param dialogContext The DialogContext object for this turn.
       * @returns The memory for the scope.
       */
    getMemory(dialogContext) {
        // if active dialog is a container dialog then "dialog" binds to it
        if (dialogContext.activeDialog) {
            const dialog = this.onFindDialog(dialogContext);
            if (dialog !== undefined) {
                // Clone properties
                const clone = {};
                for (const key in dialog) {
                    const prop = dialog[key];
                    if (Object.prototype.hasOwnProperty.call(dialog, key) && typeof prop !== 'function') {
                        if (isExpression(prop)) {
                            const { value, error } = prop.tryGetValue(dialogContext.state);
                            if (!error) {
                                clone[key] = value;
                            }
                        }
                        else {
                            clone[key] = prop;
                        }
                    }
                }
                return clone;
            }
        }
        return {};
    }
    /**
       * Override to find the dialog instance referenced by the scope.
       *
       * @param dialogContext Current dialog context.
       * @returns The dialog instance referenced by the scope.
       */
    onFindDialog(dialogContext) {
        return dialogContext.findDialog(dialogContext.activeDialog.id);
    }
}
exports.ClassMemoryScope = ClassMemoryScope;
function isExpression(prop) {
    return typeof prop === 'object' && typeof prop['tryGetValue'] === 'function';
}
//# sourceMappingURL=classMemoryScope.js.map