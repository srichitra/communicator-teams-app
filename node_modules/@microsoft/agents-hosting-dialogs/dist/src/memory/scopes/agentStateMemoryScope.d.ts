import { MemoryScope } from './memoryScope';
import { DialogContext } from '../../dialogContext';
/**
 * Base class for memory scopes based on AgentState.
 */
export declare class AgentStateMemoryScope extends MemoryScope {
    protected stateKey: string;
    /**
       * Initializes a new instance of the AgentStateMemoryScope class.
       *
       * @param name name of the property.
       */
    constructor(name: string);
    /**
       * Get the backing memory for this scope.
       *
       * @param dialogContext current dialog context.
       * @returns Memory for the scope.
       */
    getMemory(dialogContext: DialogContext): object;
    /**
       * Changes the backing object for the memory scope.
       *
       * @param dialogContext current dialog context
       * @param _memory memory
       */
    setMemory(dialogContext: DialogContext, _memory: object): void;
    /**
       * Populates the state cache for this AgentState from the storage layer.
       *
       * @param dialogContext The DialogContext object for this turn.
       * @param force Optional, `true` to overwrite any existing state cache;
       * or `false` to load state from storage only if the cache doesn't already exist.
       * @returns A Promise that represents the work queued to execute.
       */
    load(dialogContext: DialogContext, force?: boolean): Promise<void>;
    /**
       * Writes the state cache for this AgentState to the storage layer.
       *
       * @param dialogContext The DialogContext object for this turn.
       * @param force Optional, `true` to save the state cache to storage;
       * or `false` to save state to storage only if a property in the cache has changed.
       * @returns A Promise that represents the work queued to execute.
       */
    saveChanges(dialogContext: DialogContext, force?: boolean): Promise<void>;
    /**
       * Deletes any state in storage and the cache for this AgentState.
       *
       * @param _dialogContext The DialogContext object for this turn.
       * @returns A Promise that represents the work queued to execute.
       */
    delete(_dialogContext: DialogContext): Promise<void>;
}
