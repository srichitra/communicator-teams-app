"use strict";
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentStatePropertyAccessor = void 0;
/**
 * Provides typed access to an Agent state property with automatic state loading.
 *
 * The AgentStatePropertyAccessor simplifies working with state by abstracting
 * the details of loading state from storage and manipulating specific properties.
 * It automatically handles:
 *
 * - Loading state when needed
 * - Deep cloning of default values to prevent reference issues
 * - Type checking for properties (when using TypeScript)
 * - Ensuring properties exist before access
 *
 * Property accessors are created through the AgentState.createProperty() method:
 *
 * ```typescript
 * // Create a property accessor for a user profile
 * const userProfile = userState.createProperty<UserProfile>("userProfile");
 *
 * // Get the profile with a default if not exists
 * const profile = await userProfile.get(context, { name: "", preferences: {} });
 *
 * // Update a value
 * profile.preferences.theme = "dark";
 *
 * // Save the change
 * await userProfile.set(context, profile);
 *
 * // Later, call userState.saveChanges(context) to persist to storage
 * ```
 *
 * @typeParam T The type of the property being accessed
 */
class AgentStatePropertyAccessor {
    /**
     * Creates a new instance of AgentStatePropertyAccessor.
     *
     * @param state The agent state object that will contain this property
     * @param name The name of the property in the state object
     */
    constructor(state, name) {
        this.state = state;
        this.name = name;
    }
    /**
     * Deletes the property from the state.
     *
     * This removes the property from the state object but does not automatically
     * persist the change to storage. Call state.saveChanges() afterwards to
     * persist changes.
     *
     * @param context The turn context
     * @param customKey Optional custom key for storing the state in a specific location
     * @returns A promise that resolves when the delete operation is complete
     */
    async delete(context, customKey) {
        const obj = await this.state.load(context, false, customKey);
        if (Object.prototype.hasOwnProperty.call(obj, this.name)) {
            delete obj[this.name];
        }
    }
    /**
     * Gets the value of the property from the state.
     *
     * If the property doesn't exist and a default value is provided, a deep clone
     * of the default value will be stored in state and returned. This ensures that
     * modifications to the returned object will be properly tracked.
     *
     * @param context The turn context
     * @param defaultValue Optional default value to use if the property doesn't exist
     * @param customKey Optional custom key for storing the state in a specific location
     * @returns A promise that resolves to the value of the property or undefined
     */
    async get(context, defaultValue, customKey) {
        const obj = await this.state.load(context, false, customKey);
        if (!Object.prototype.hasOwnProperty.call(obj, this.name) && defaultValue !== undefined) {
            const clone = typeof defaultValue === 'object' || Array.isArray(defaultValue)
                ? JSON.parse(JSON.stringify(defaultValue))
                : defaultValue;
            obj[this.name] = clone;
        }
        return obj[this.name];
    }
    /**
     * Sets the value of the property in the state.
     *
     * This updates the property in the in-memory state object but does not automatically
     * persist the change to storage. Call state.saveChanges() afterwards to persist changes.
     *
     * @param context The turn context
     * @param value The value to set
     * @param customKey Optional custom key for storing the state in a specific location
     * @returns A promise that resolves when the set operation is complete
     */
    async set(context, value, customKey) {
        const obj = await this.state.load(context, false, customKey);
        obj[this.name] = value;
    }
}
exports.AgentStatePropertyAccessor = AgentStatePropertyAccessor;
//# sourceMappingURL=agentStatePropertyAccesor.js.map