/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Storage } from '../storage';
import { AppMemory } from './appMemory';
import { InputFile } from './inputFileDownloader';
import { TurnStateEntry } from './turnStateEntry';
import { TurnContext } from '../turnContext';
export interface DefaultConversationState {
}
export interface DefaultUserState {
}
export interface DefaultTempState {
    input: string;
    inputFiles: InputFile[];
    lastOutput: string;
    actionOutputs: Record<string, string>;
    authTokens: {
        [key: string]: string;
    };
    duplicateTokenExchange?: boolean;
}
export interface DefaultSSOState {
    flowStarted: boolean;
    userToken: string;
    flowExpires: number;
}
/**
 * Base class defining a collection of turn state scopes.
 * @remarks
 * Developers can create a derived class that extends `TurnState` to add additional state scopes.
 * ```JavaScript
 * class MyTurnState extends TurnState {
 *   protected async onComputeStorageKeys(context) {
 *     const keys = await super.onComputeStorageKeys(context);
 *     keys['myScope'] = `myScopeKey`;
 *     return keys;
 *   }
 *
 *   public get myScope() {
 *     const scope = this.getScope('myScope');
 *     if (!scope) {
 *       throw new Error(`MyTurnState hasn't been loaded. Call load() first.`);
 *     }
 *     return scope.value;
 *   }
 *
 *   public set myScope(value) {
 *     const scope = this.getScope('myScope');
 *     if (!scope) {
 *       throw new Error(`MyTurnState hasn't been loaded. Call load() first.`);
 *     }
 *     scope.replace(value);
 *   }
 * }
 * ```
 */
export declare class TurnState<TConversationState = DefaultConversationState, TUserState = DefaultUserState, TTempState = DefaultTempState, TSSOState = DefaultSSOState> implements AppMemory {
    private _scopes;
    private _isLoaded;
    private _loadingPromise?;
    private _stateNotLoadedString;
    get conversation(): TConversationState;
    set conversation(value: TConversationState);
    get isLoaded(): boolean;
    get temp(): TTempState;
    set temp(value: TTempState);
    get user(): TUserState;
    set user(value: TUserState);
    get sso(): TSSOState;
    set sso(value: TSSOState);
    deleteConversationState(): void;
    deleteTempState(): void;
    deleteUserState(): void;
    getScope(scope: string): TurnStateEntry | undefined;
    deleteValue(path: string): void;
    hasValue(path: string): boolean;
    getValue<TValue = unknown>(path: string): TValue;
    setValue(path: string, value: unknown): void;
    load(context: TurnContext, storage?: Storage, force?: boolean): Promise<boolean>;
    save(context: TurnContext, storage?: Storage): Promise<void>;
    protected onComputeStorageKeys(context: TurnContext): Promise<Record<string, string>>;
    private getScopeAndName;
}
