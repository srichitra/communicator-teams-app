/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { TurnContext } from '../../turnContext';
import { TurnState } from '../turnState';
import { Storage } from '../../storage';
import { OAuthFlow, TokenResponse } from '../../oauth';
/**
 * Options for configuring user identity.
 * Contains settings related to Single Sign-On (SSO) authentication.
 */
export interface UserIdentityOptions {
    /**
     * Determines whether Single Sign-On (SSO) is enabled for user authentication.
     */
    enableSSO: boolean;
    /**
     * The name of the SSO connection to use when SSO is enabled.
     * Only applicable when enableSSO is set to true.
     */
    ssoConnectionName?: string;
}
export declare class UserIdentity {
    oAuthFlow: OAuthFlow;
    /**
     * Creates a new instance of UserAuthorization.
     * @param {Storage} storage - The storage system to use for state management.
     */
    constructor(storage: Storage, connectionName: string);
    getToken(context: TurnContext): Promise<TokenResponse>;
    authenticate(context: TurnContext, state: TurnState): Promise<TokenResponse>;
    /**
     * Signs out the current user.
     * This method clears the user's token and resets the SSO state.
     *
     * @param {TurnContext} context - The context object for the current turn.
     * @param {TurnState} state - The state object for the current turn.
     */
    signOut(context: TurnContext, state: TurnState): Promise<void>;
    _signInHandler: ((context: TurnContext, state: TurnState) => void) | null;
    onSignInSuccess(handler: (context: TurnContext, state: TurnState) => void): void;
}
