"use strict";
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserIdentity = void 0;
const oauth_1 = require("../../oauth");
const state_1 = require("../../state");
class UserIdentity {
    /**
     * Creates a new instance of UserAuthorization.
     * @param {Storage} storage - The storage system to use for state management.
     */
    constructor(storage, connectionName) {
        this._signInHandler = null;
        const userState = new state_1.UserState(storage);
        this.oAuthFlow = new oauth_1.OAuthFlow(userState, connectionName);
    }
    async getToken(context) {
        return await this.oAuthFlow.getUserToken(context);
    }
    async authenticate(context, state) {
        var _a;
        let tokenResponse;
        if (((_a = this.oAuthFlow.state) === null || _a === void 0 ? void 0 : _a.flowStarted) === false) {
            tokenResponse = await this.oAuthFlow.beginFlow(context);
        }
        else {
            tokenResponse = await this.oAuthFlow.continueFlow(context);
            if (tokenResponse.status === oauth_1.TokenRequestStatus.Success) {
                if (this._signInHandler) {
                    await this._signInHandler(context, state);
                }
            }
        }
        return tokenResponse;
    }
    /**
     * Signs out the current user.
     * This method clears the user's token and resets the SSO state.
     *
     * @param {TurnContext} context - The context object for the current turn.
     * @param {TurnState} state - The state object for the current turn.
     */
    async signOut(context, state) {
        await this.oAuthFlow.signOut(context);
    }
    onSignInSuccess(handler) {
        this._signInHandler = handler;
    }
}
exports.UserIdentity = UserIdentity;
//# sourceMappingURL=userIdentity.js.map