"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectorClient = exports.getProductInfo = void 0;
/** * Copyright (c) Microsoft Corporation. All rights reserved. * Licensed under the MIT License. */
const axios_1 = __importDefault(require("axios"));
const logger_1 = require("../logger");
const activityWireCompat_1 = require("../activityWireCompat");
const getProductInfo_1 = require("../getProductInfo");
Object.defineProperty(exports, "getProductInfo", { enumerable: true, get: function () { return getProductInfo_1.getProductInfo; } });
const logger = (0, logger_1.debug)('agents:connector-client');
/**
 * ConnectorClient is a client for interacting with the Microsoft Connector API.
 */
class ConnectorClient {
    /**
     * Private constructor for the ConnectorClient.
     * @param client - The AxiosInstance to use for HTTP requests.
     */
    constructor(client) {
        this.client = client;
        this.client.interceptors.response.use((config) => {
            const { status, statusText, config: requestConfig } = config;
            logger.debug('Response: ', {
                status,
                statusText,
                host: this.client.getUri(),
                url: requestConfig === null || requestConfig === void 0 ? void 0 : requestConfig.url,
                data: config.config.data,
                method: requestConfig === null || requestConfig === void 0 ? void 0 : requestConfig.method,
            });
            return config;
        }, (error) => {
            const { code, message, stack } = error;
            const errorDetails = {
                code,
                host: this.client.getUri(),
                url: error.config.url,
                method: error.config.method,
                data: error.config.data,
                message,
                stack,
            };
            return Promise.reject(errorDetails);
        });
    }
    /**
     * Creates a new instance of ConnectorClient with authentication.
     * @param baseURL - The base URL for the API.
     * @param authConfig - The authentication configuration.
     * @param authProvider - The authentication provider.
     * @param scope - The scope for the authentication token.
     * @returns A new instance of ConnectorClient.
     */
    static async createClientWithAuthAsync(baseURL, authConfig, authProvider, scope) {
        const axiosInstance = axios_1.default.create({
            baseURL,
            headers: {
                Accept: 'application/json',
                'User-Agent': (0, getProductInfo_1.getProductInfo)(),
            },
            transformRequest: [
                (data, headers) => {
                    return JSON.stringify((0, activityWireCompat_1.normalizeOutgoingActivity)(data));
                }
            ]
        });
        const token = await authProvider.getAccessToken(authConfig, scope);
        if (token.length > 1) {
            axiosInstance.defaults.headers.common.Authorization = `Bearer ${token}`;
        }
        return new ConnectorClient(axiosInstance);
    }
    /**
     * Retrieves a list of conversations.
     * @param continuationToken - The continuation token for pagination.
     * @returns A list of conversations.
     */
    async getConversationsAsync(continuationToken) {
        const config = {
            method: 'get',
            url: '/v3/conversations',
            params: continuationToken ? { continuationToken } : undefined
        };
        const response = await this.client(config);
        return response.data;
    }
    /**
     * Creates a new conversation.
     * @param body - The conversation parameters.
     * @returns The conversation resource response.
     */
    async createConversationAsync(body) {
        // const payload = normalizeOutgoingConvoParams(body)
        const config = {
            method: 'post',
            url: '/v3/conversations',
            headers: {
                'Content-Type': 'application/json'
            },
            data: body
        };
        const response = await this.client(config);
        return response.data;
    }
    /**
     * Replies to an activity in a conversation.
     * @param conversationId - The ID of the conversation.
     * @param activityId - The ID of the activity.
     * @param body - The activity object.
     * @returns The resource response.
     */
    async replyToActivityAsync(conversationId, activityId, body) {
        logger.debug(`Replying to activity: ${activityId} in conversation: ${conversationId}`);
        if (!conversationId || !activityId) {
            throw new Error('conversationId and activityId are required');
        }
        const config = {
            method: 'post',
            url: `v3/conversations/${conversationId}/activities/${encodeURIComponent(activityId)}`,
            headers: {
                'Content-Type': 'application/json'
            },
            data: body
        };
        const response = await this.client(config);
        logger.info('Reply to conversation/activity: ', response.data.id, activityId);
        return response.data;
    }
    /**
     * Sends an activity to a conversation.
     * @param conversationId - The ID of the conversation.
     * @param body - The activity object.
     * @returns The resource response.
     */
    async sendToConversationAsync(conversationId, body) {
        logger.debug(`Send to conversation: ${conversationId} activity: ${body.id}`);
        if (!conversationId) {
            throw new Error('conversationId is required');
        }
        const config = {
            method: 'post',
            url: `v3/conversations/${conversationId}/activities`,
            headers: {
                'Content-Type': 'application/json'
            },
            data: body
        };
        const response = await this.client(config);
        return response.data;
    }
    /**
     * Updates an activity in a conversation.
     * @param conversationId - The ID of the conversation.
     * @param activityId - The ID of the activity.
     * @param body - The activity object.
     * @returns The resource response.
     */
    async updateActivityAsync(conversationId, activityId, body) {
        if (!conversationId || !activityId) {
            throw new Error('conversationId and activityId are required');
        }
        const config = {
            method: 'put',
            url: `v3/conversations/${conversationId}/activities/${activityId}`,
            headers: {
                'Content-Type': 'application/json'
            },
            data: body
        };
        const response = await this.client(config);
        return response.data;
    }
    /**
     * Deletes an activity from a conversation.
     * @param conversationId - The ID of the conversation.
     * @param activityId - The ID of the activity.
     * @returns A promise that resolves when the activity is deleted.
     */
    async deleteActivityAsync(conversationId, activityId) {
        if (!conversationId || !activityId) {
            throw new Error('conversationId and activityId are required');
        }
        const config = {
            method: 'delete',
            url: `v3/conversations/${conversationId}/activities/${activityId}`,
            headers: {
                'Content-Type': 'application/json'
            }
        };
        const response = await this.client(config);
        return response.data;
    }
    /**
       * Uploads an attachment to a conversation.
       * @param conversationId - The ID of the conversation.
       * @param body - The attachment data.
       * @returns The resource response.
       */
    async uploadAttachment(conversationId, body) {
        if (conversationId === undefined) {
            throw new Error('conversationId is required');
        }
        const config = {
            method: 'post',
            url: `v3/conversations/${conversationId}/attachments`,
            headers: {
                'Content-Type': 'application/json'
            },
            data: body
        };
        const response = await this.client(config);
        return response.data;
    }
    /**
     * Retrieves attachment information by attachment ID.
     * @param attachmentId - The ID of the attachment.
     * @returns The attachment information.
     */
    async getAttachmentInfo(attachmentId) {
        if (attachmentId === undefined) {
            throw new Error('attachmentId is required');
        }
        const config = {
            method: 'get',
            url: `v3/attachments/${attachmentId}`,
            headers: {
                'Content-Type': 'application/json'
            }
        };
        const response = await this.client(config);
        return response.data;
    }
    /**
     * Retrieves an attachment by attachment ID and view ID.
     * @param attachmentId - The ID of the attachment.
     * @param viewId - The ID of the view.
     * @returns The attachment as a readable stream.
     */
    async getAttachment(attachmentId, viewId) {
        if (attachmentId === undefined) {
            throw new Error('attachmentId is required');
        }
        if (viewId === undefined) {
            throw new Error('viewId is required');
        }
        const config = {
            method: 'get',
            url: `v3/attachments/${attachmentId}/views/${viewId}`,
            headers: {
                'Content-Type': 'application/json'
            }
        };
        const response = await this.client(config);
        return response.data;
    }
}
exports.ConnectorClient = ConnectorClient;
//# sourceMappingURL=connectorClient.js.map