import { AgentStatePropertyAccessor, UserState, TurnContext, UserTokenClient } from '../';
import { TokenResponse } from './tokenResponse';
export declare class FlowState {
    flowStarted: boolean;
    flowExpires: number;
}
/**
 * Manages the OAuth flow for Teams.
 */
export declare class OAuthFlow {
    userTokenClient?: UserTokenClient;
    state: FlowState | null;
    flowStateAccessor: AgentStatePropertyAccessor<FlowState | null>;
    tokenExchangeId: string | null;
    absOauthConnectionName: string;
    /**
     * Creates a new instance of OAuthFlow.
     * @param userState The user state.
     */
    constructor(userState: UserState, absOauthConnectionName: string, tokenClient?: UserTokenClient);
    getUserToken(context: TurnContext): Promise<TokenResponse>;
    /**
     * Begins the OAuth flow.
     * @param context The turn context.
     * @returns A promise that resolves to the user token.
     */
    beginFlow(context: TurnContext): Promise<TokenResponse>;
    /**
     * Continues the OAuth flow.
     * @param context The turn context.
     * @returns A promise that resolves to the user token.
     */
    continueFlow(context: TurnContext): Promise<TokenResponse>;
    /**
     * Signs the user out.
     * @param context The turn context.
     * @returns A promise that resolves when the sign-out operation is complete.
     */
    signOut(context: TurnContext): Promise<void>;
    /**
     * Gets the user state.
     * @param context The turn context.
     * @returns A promise that resolves to the user state.
     */
    private getUserState;
    private initializeTokenClient;
}
