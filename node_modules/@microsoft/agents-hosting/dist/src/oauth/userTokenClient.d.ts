import { AxiosInstance } from 'axios';
import { SigningResource } from './signingResource';
import { Activity } from '@microsoft/agents-activity';
import { TokenExchangeRequest } from './tokenExchangeRequest';
import { TokenResponse } from './tokenResponse';
/**
 * Client for managing user tokens.
 */
export declare class UserTokenClient {
    client: AxiosInstance;
    /**
     * Creates a new instance of UserTokenClient.
     * @param token The token to use for authentication.
     */
    constructor(token: string);
    /**
     * Gets the user token.
     * @param connectionName The connection name.
     * @param channelId The channel ID.
     * @param userId The user ID.
     * @param code The optional code.
     * @returns A promise that resolves to the user token.
     */
    getUserToken(connectionName: string, channelId: string, userId: string, code?: string): Promise<TokenResponse>;
    /**
     * Signs the user out.
     * @param userId The user ID.
     * @param connectionName The connection name.
     * @param channelId The channel ID.
     * @returns A promise that resolves when the sign-out operation is complete.
     */
    signOut(userId: string, connectionName: string, channelId: string): Promise<void>;
    /**
     * Gets the sign-in resource.
     * @param appId The application ID.
     * @param cnxName The connection name.
     * @param activity The activity.
     * @returns A promise that resolves to the signing resource.
     */
    getSignInResource(appId: string, cnxName: string, activity: Activity): Promise<SigningResource>;
    /**
     * Exchanges the token.
     * @param userId The user ID.
     * @param connectionName The connection name.
     * @param channelId The channel ID.
     * @param tokenExchangeRequest The token exchange request.
     * @returns A promise that resolves to the exchanged token.
     */
    exchangeTokenAsync(userId: string, connectionName: string, channelId: string, tokenExchangeRequest: TokenExchangeRequest): Promise<TokenResponse>;
}
