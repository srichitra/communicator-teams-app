"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserTokenClient = void 0;
const axios_1 = __importDefault(require("axios"));
const logger_1 = require("../logger");
const activityWireCompat_1 = require("../activityWireCompat");
const tokenResponse_1 = require("./tokenResponse");
const getProductInfo_1 = require("../getProductInfo");
const logger = (0, logger_1.debug)('agents:user-token-client');
/**
 * Client for managing user tokens.
 */
class UserTokenClient {
    /**
     * Creates a new instance of UserTokenClient.
     * @param token The token to use for authentication.
     */
    constructor(token) {
        const baseURL = 'https://api.botframework.com';
        const axiosInstance = axios_1.default.create({
            baseURL,
            headers: {
                Accept: 'application/json',
                'User-Agent': (0, getProductInfo_1.getProductInfo)(),
            }
        });
        axiosInstance.defaults.headers.common.Authorization = `Bearer ${token}`;
        this.client = axiosInstance;
    }
    /**
     * Gets the user token.
     * @param connectionName The connection name.
     * @param channelId The channel ID.
     * @param userId The user ID.
     * @param code The optional code.
     * @returns A promise that resolves to the user token.
     */
    async getUserToken(connectionName, channelId, userId, code) {
        var _a;
        try {
            const params = { connectionName, channelId, userId, code };
            const response = await this.client.get('/api/usertoken/GetToken', { params });
            return { ...response.data, status: tokenResponse_1.TokenRequestStatus.Success };
        }
        catch (error) {
            if (((_a = error.response) === null || _a === void 0 ? void 0 : _a.status) !== 404) {
                logger.error(error);
            }
            return {
                status: tokenResponse_1.TokenRequestStatus.Failed,
                token: undefined
            };
        }
    }
    /**
     * Signs the user out.
     * @param userId The user ID.
     * @param connectionName The connection name.
     * @param channelId The channel ID.
     * @returns A promise that resolves when the sign-out operation is complete.
     */
    async signOut(userId, connectionName, channelId) {
        try {
            const params = { userId, connectionName, channelId };
            const response = await this.client.delete('/api/usertoken/SignOut', { params });
            if (response.status !== 200) {
                throw new Error('Failed to sign out');
            }
        }
        catch (error) {
            logger.error(error);
            throw new Error('Failed to sign out');
        }
    }
    /**
     * Gets the sign-in resource.
     * @param appId The application ID.
     * @param cnxName The connection name.
     * @param activity The activity.
     * @returns A promise that resolves to the signing resource.
     */
    async getSignInResource(appId, cnxName, activity) {
        try {
            const tokenExchangeState = {
                connectionName: cnxName,
                conversation: activity.getConversationReference(),
                relatesTo: activity.RelatesTo,
                msAppId: appId
            };
            const tokenExchangeStateNormalized = (0, activityWireCompat_1.normalizeTokenExchangeState)(tokenExchangeState);
            const state = Buffer.from(JSON.stringify(tokenExchangeStateNormalized)).toString('base64');
            const params = { state };
            const response = await this.client.get('/api/botsignin/GetSignInResource', { params });
            return response.data;
        }
        catch (error) {
            logger.error(error);
            throw error;
        }
    }
    /**
     * Exchanges the token.
     * @param userId The user ID.
     * @param connectionName The connection name.
     * @param channelId The channel ID.
     * @param tokenExchangeRequest The token exchange request.
     * @returns A promise that resolves to the exchanged token.
     */
    async exchangeTokenAsync(userId, connectionName, channelId, tokenExchangeRequest) {
        try {
            const params = { userId, connectionName, channelId };
            const response = await this.client.post('/api/usertoken/exchange', tokenExchangeRequest, { params });
            return { ...response.data, status: tokenResponse_1.TokenRequestStatus.Success };
        }
        catch (error) {
            logger.error(error);
            return { status: tokenResponse_1.TokenRequestStatus.Failed, token: undefined };
        }
    }
}
exports.UserTokenClient = UserTokenClient;
//# sourceMappingURL=userTokenClient.js.map