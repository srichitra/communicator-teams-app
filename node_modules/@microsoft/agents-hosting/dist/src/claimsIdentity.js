"use strict";
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClaimsIdentity = void 0;
/**
 * Represents an identity with a collection of claims.
 */
class ClaimsIdentity {
    /**
     * Creates a new instance of the ClaimsIdentity class.
     * @param claims The collection of claims associated with the identity.
     * @param authenticationType The type of authentication used, or a boolean indicating if the identity is authenticated.
     */
    constructor(claims, authenticationType) {
        this.claims = claims;
        this.authenticationType = authenticationType;
    }
    /**
     * Indicates whether the identity is authenticated.
     * @returns True if the identity is authenticated; otherwise, false.
     */
    get isAuthenticated() {
        if (typeof this.authenticationType === 'boolean') {
            return this.authenticationType;
        }
        return this.authenticationType != null;
    }
    /**
     * Gets the value of a claim by its type.
     * @param claimType The type of the claim to retrieve.
     * @returns The value of the claim, or null if the claim is not found.
     */
    getClaimValue(claimType) {
        var _a;
        const claim = this.claims.find((c) => c.type === claimType);
        return (_a = claim === null || claim === void 0 ? void 0 : claim.value) !== null && _a !== void 0 ? _a : null;
    }
}
exports.ClaimsIdentity = ClaimsIdentity;
//# sourceMappingURL=claimsIdentity.js.map