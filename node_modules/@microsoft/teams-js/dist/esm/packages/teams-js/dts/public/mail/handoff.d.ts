/**
 * Used to interact with mail capability, including opening and composing mail.
 * @module
 *
 * @beta
 */
import { ComposeMailParams } from './mail';
/**
 * Extended parameters for {@link composeMail}, including support for external handoff.
 *
 * This interface wraps {@link ComposeMailParamsWithHandoff} to provide additional functionality for scenarios
 * where an external handoff is needed, such as transferring a draft email created in BizChat.
 *
 * @see {@link ComposeNewParams} for parameters when composing a new mail item.
 * @see {@link ComposeReplyOrForwardParams} for reply or forward-specific parameters.
 * @see {@link ComposeMailType} for supported mail operation types.
 *
 * @beta
 */
export interface ComposeMailParamsWithHandoff {
    /**
     * Base parameters for composing a mail item.
     */
    composeMailParams: ComposeMailParams;
    /**
     * Use this endpoint to retrieve the handoff payload when BizChat creates an email draft for external handoff.
     */
    handoffId: string;
}
/**
 * Compose a new email in the user's mailbox, opening it in the drafts UX instead of the standard email.
 *
 * @param composeMailParamsWithHandoff - Object that specifies the type of mail item to compose and the details of the mail item.
 * @returns { Promise<void> } - promise resolves after the compose window has opened successfully in host SDK.
 * @throws Error with a message describing whether the capability is not initialized or the input is invalid.
 *
 * @beta
 */
export declare function composeMailWithHandoff(composeMailParamsWithHandoff: ComposeMailParamsWithHandoff): Promise<void>;
/**
 * Checks if the mail capability and handoff sub-capability is supported by the host
 * @returns boolean to represent whether the handoff sub-capability is supported
 *
 * @throws Error if {@linkcode app.initialize} has not successfully completed
 *
 * @beta
 */
export declare function isSupported(): boolean;
