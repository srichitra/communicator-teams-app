import { UUID as MessageUUID } from '../public/uuidObject';
import { DOMMessageEvent } from './interfaces';
import { MessageRequestWithRequiredProperties } from './messageObjects';
/**
 * @internal
 * Limited to Microsoft-internal use
 */
export declare function uninitializeChildCommunication(): void;
/**
 * @hidden
 * @internal
 * Limited to Microsoft-internal use
 */
export declare function shouldEventBeRelayedToChild(): boolean;
type SendMessageToParentHelper = (apiVersionTag: string, func: string, args?: any[], isProxiedFromChild?: boolean, teamsJsInstanceId?: string) => MessageRequestWithRequiredProperties;
type SetCallbackForRequest = (uuid: MessageUUID, callback: Function) => void;
/**
 * @hidden
 * @internal
 * Limited to Microsoft-internal use
 */
export declare function shouldProcessChildMessage(messageSource: Window, messageOrigin: string): boolean;
/**
 * @hidden
 * @internal
 * Limited to Microsoft-internal use
 */
export declare function handleIncomingMessageFromChild(evt: DOMMessageEvent, messageSource: Window, sendMessageToParentHelper: SendMessageToParentHelper, setCallbackForRequest: SetCallbackForRequest): Promise<void>;
/**
 * @hidden
 * Send a custom message object that can be sent to child window,
 * instead of a response message to a child
 *
 * @internal
 * Limited to Microsoft-internal use
 */
export declare function sendMessageEventToChild(actionName: string, args?: any[]): void;
export {};
