{"version":3,"sources":["../src/components/Rotate/Rotate.ts"],"sourcesContent":["import { AtomMotion, createPresenceComponent, motionTokens, PresenceMotionFn } from '@fluentui/react-motion';\nimport { fadeAtom } from '../../atoms/fade-atom';\nimport { rotateAtom } from '../../atoms/rotate-atom';\nimport { RotateParams } from './rotate-types';\n\n/**\n * Define a presence motion for rotate in/out\n *\n * @param duration - Time (ms) for the enter transition (rotate-in). Defaults to the `durationGentle` value.\n * @param easing - Easing curve for the enter transition (rotate-in). Defaults to the `curveDecelerateMax` value.\n * @param exitDuration - Time (ms) for the exit transition (rotate-out). Defaults to the `duration` param for symmetry.\n * @param exitEasing - Easing curve for the exit transition (rotate-out). Defaults to the `curveAccelerateMax` value.\n * @param axis - The axis of rotation: 'x', 'y', or 'z'. Defaults to 'y'.\n * @param angle - The starting rotation angle in degrees. Defaults to -90.\n * @param exitAngle - The ending rotation angle in degrees. Defaults to the negation of `angle`.\n * @param animateOpacity - Whether to animate the opacity during the rotation. Defaults to `true`.\n */\nconst rotatePresenceFn: PresenceMotionFn<RotateParams> = ({\n  axis = 'y',\n  angle = -90,\n  exitAngle = -angle,\n  duration = motionTokens.durationGentle,\n  exitDuration = duration,\n  easing = motionTokens.curveDecelerateMax,\n  exitEasing = motionTokens.curveAccelerateMax,\n  animateOpacity = true,\n}: RotateParams) => {\n  const enterAtoms: AtomMotion[] = [\n    rotateAtom({\n      direction: 'enter',\n      duration,\n      easing,\n      axis,\n      angle,\n      exitAngle,\n    }),\n  ];\n\n  const exitAtoms: AtomMotion[] = [\n    rotateAtom({\n      direction: 'exit',\n      duration: exitDuration,\n      easing: exitEasing,\n      axis,\n      angle,\n      exitAngle,\n    }),\n  ];\n\n  if (animateOpacity) {\n    enterAtoms.push(fadeAtom({ direction: 'enter', duration, easing }));\n    exitAtoms.push(fadeAtom({ direction: 'exit', duration: exitDuration, easing: exitEasing }));\n  }\n\n  return {\n    enter: enterAtoms,\n    exit: exitAtoms,\n  };\n};\n\n// Create a presence motion component to rotate an element around a single axis (x, y, or z).\nexport const Rotate = createPresenceComponent(rotatePresenceFn);\n"],"names":["createPresenceComponent","motionTokens","fadeAtom","rotateAtom","rotatePresenceFn","axis","angle","exitAngle","duration","durationGentle","exitDuration","easing","curveDecelerateMax","exitEasing","curveAccelerateMax","animateOpacity","enterAtoms","direction","exitAtoms","push","enter","exit","Rotate"],"mappings":"AAAA,SAAqBA,uBAAuB,EAAEC,YAAY,QAA0B,yBAAyB;AAC7G,SAASC,QAAQ,QAAQ,wBAAwB;AACjD,SAASC,UAAU,QAAQ,0BAA0B;AAGrD;;;;;;;;;;;CAWC,GACD,MAAMC,mBAAmD,CAAC,EACxDC,OAAO,GAAG,EACVC,QAAQ,CAAC,EAAE,EACXC,YAAY,CAACD,KAAK,EAClBE,WAAWP,aAAaQ,cAAc,EACtCC,eAAeF,QAAQ,EACvBG,SAASV,aAAaW,kBAAkB,EACxCC,aAAaZ,aAAaa,kBAAkB,EAC5CC,iBAAiB,IAAI,EACR;IACb,MAAMC,aAA2B;QAC/Bb,WAAW;YACTc,WAAW;YACXT;YACAG;YACAN;YACAC;YACAC;QACF;KACD;IAED,MAAMW,YAA0B;QAC9Bf,WAAW;YACTc,WAAW;YACXT,UAAUE;YACVC,QAAQE;YACRR;YACAC;YACAC;QACF;KACD;IAED,IAAIQ,gBAAgB;QAClBC,WAAWG,IAAI,CAACjB,SAAS;YAAEe,WAAW;YAAST;YAAUG;QAAO;QAChEO,UAAUC,IAAI,CAACjB,SAAS;YAAEe,WAAW;YAAQT,UAAUE;YAAcC,QAAQE;QAAW;IAC1F;IAEA,OAAO;QACLO,OAAOJ;QACPK,MAAMH;IACR;AACF;AAEA,6FAA6F;AAC7F,OAAO,MAAMI,SAAStB,wBAAwBI,kBAAkB"}